#include <stdio.h>

int is_present(char c, char word[]){
    for (int i = 0; i <5; i++){
        if (word[i] == c){
            return 1;
        }
    }
    return 0;
}

int find_size(char *word){
    int count = 0;
    while (*word!='\0'){
        count++;
        word++;
    }
    return count;
}

int is_caps(char *word){
    while (*word!='\0'){
        if (!(*word >= 65 && *word <= 90)){//according to ASCII letter codes
            return 0;
        }
        word++;
    }
    return 1;

}

int linear_search(char c, char word[]){
    for (int i = 0; i <5; i++){
        if (word[i] == c){
            return i;
        }
    }
    return -1;
}

int check_equality(char *str1, char *str2){//1 if two strings are equal, 0 if not
    while(*str1!='\0'){
        if (*str1!=*str2){
            return 0;
        }
        str1++;
        str2++;
        
    }
    return 1;
}

int main()
{
    char correct[5] = "SPOON";
    char dashed[5] = "_____";
    char guess[5];
    char mask[5] = "BBBBB";
    int stop = 0;//number of tries left

    do{                                 //GAME LOOP
        printf("You have %d tries left. \nEnter a five letter word in all caps, or EXIT to exit: ", 6 - stop);
        scanf("%s", guess);
        stop++;
        
        //                  end game condition
        if (check_equality(guess, "EXIT") == 1){
            printf("Goodbye!\n");
            break;
        }
        if (stop == 6){
            printf("You lose!");
            break;
        }
        
        //if guess not valid, undo try increment
        if (find_size(guess)!=5 || is_caps(guess) != 1){
            if (find_size(guess)!=5){
                printf("Your word is not five letters. \n");
            }
            if (is_caps(guess) != 1){
                printf("Your word is not all caps. \n");
            }
            stop--;
            continue;
        }
        char dashed[5] = "_____"; // dashes will appear with correct guessed letters in place instead of dashes
        char mask[5] = "BBBBB"; // will appear underneath entered word
        
        //iterating over entered word & checking only for green letters + modifying dashed & mask
        for (int i = 0; i<5; i++){
                if (guess[i]==correct[i]){//if letter is present and in right position
                    dashed[i] = guess[i];
                    mask[i] = 'G';//G now in same index in mask: BBBBB as correct letter. 
        }}
        
        //iterating over entered word & checking only for yellow letters + modifying dashed & mask
        for (int i = 0; i<5; i++){
            if (is_present(guess[i], correct)==1 && mask[i] != 'G'//if letter is present in correct word and its position isnt already green
            && mask[linear_search(guess[i], correct)] != 'G'){//THIS CONDITION NECESSARY TO AVOID FALSE YELLOWS
                    dashed[i] = guess[i];
                    mask[i] = 'Y';
            
        }

        }

        //PROPERLY printing dashed & mask. broken when using %s
        printf("\n");
        for (int i = 0; i<5; i++){
            printf("%c", dashed[i]);
        }printf("\n");
        for (int i = 0; i<5; i++){
            printf("%c", mask[i]);
        }
        printf("\n");
        
    } while (check_equality(guess, correct)!=1);
    
    if (check_equality(guess, correct)==1){
        printf("\nYou won!");
    }
    
    
    
    return 0;
}
